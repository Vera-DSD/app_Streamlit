import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf 
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
    page_icon="üìä",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title('üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö Apple & Tips')
st.markdown('---')

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.title("üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", 
                       ["üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", 
                        "üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π Apple", 
                        "üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö Tips"])

# –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ 
st.sidebar.header("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
uploaded_file = st.sidebar.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type=['csv'], 
                                       help="–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ Tips Analysis")

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
if page == "üè† –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞":
    st.header("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–µ–Ω—é —Å–ª–µ–≤–∞")

# –†–∞–∑–¥–µ–ª Apple
elif page == "üìà –ê–Ω–∞–ª–∏–∑ –∞–∫—Ü–∏–π Apple":
    st.header("üìà –ê–∫—Ü–∏–∏ Apple (AAPL)")
    
    # –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    period = st.selectbox("–ü–µ—Ä–∏–æ–¥:", ["1mo", "3mo", "6mo", "1y"], index=2)
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = yf.download("AAPL", period=period)
        
        if len(data) > 0:
            # –ü—Ä–æ—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            current_price = float(data['Close'].iloc[-1])
            prev_price = float(data['Close'].iloc[-2]) if len(data) > 1 else current_price
            
            st.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${current_price:.2f}", 
                     f"${current_price - prev_price:.2f}")
            
            # –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫
            fig, ax = plt.subplots(figsize=(10, 4))
            ax.plot(data.index, data['Close'].astype(float), linewidth=2)
            ax.set_title("–¶–µ–Ω–∞ –∞–∫—Ü–∏–π Apple")
            ax.grid(True, alpha=0.3)
            st.pyplot(fig)
            plt.close(fig)
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
            st.write("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:")
            display_data = data.tail().copy()
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            st.dataframe(display_data.round(2))
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Apple
            csv_data = data.to_csv().encode('utf-8')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ Apple",
                data=csv_data,
                file_name=f"apple_data_{period}.csv",
                mime="text/csv"
            )
            
        else:
            st.write("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
    except Exception as e:
        st.write("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        st.write(str(e))

# –†–∞–∑–¥–µ–ª Tips
elif page == "üçΩÔ∏è –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö Tips":
    st.header("üìã –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö Tips")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ Tips
    def create_tips_data():
        np.random.seed(42)
        n = 100
        
        data = {
            'total_bill': np.round(np.random.uniform(10, 50, n), 2),
            'tip': np.round(np.random.uniform(1, 10, n), 2),
            'size': np.random.randint(1, 6, n),
            'day': np.random.choice(['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'], n),
            'time': np.random.choice(['Lunch', 'Dinner'], n)
        }
        
        df = pd.DataFrame(data)
        df['tip'] = df['tip'].clip(lower=1.0)
        return df
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if uploaded_file is not None:
        try:
            tips_data = pd.read_csv(uploaded_file)
            st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {uploaded_file.name}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            tips_data = create_tips_data()
            st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ")
    else:
        tips_data = create_tips_data()
        st.info("–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ Tips")
    
    st.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(tips_data)}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    col1, col2, col3 = st.columns(3)
    col1.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"${tips_data['total_bill'].mean():.2f}")
    col2.metric("–°—Ä–µ–¥–Ω–∏–µ —á–∞–µ–≤—ã–µ", f"${tips_data['tip'].mean():.2f}")
    col3.metric("–†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã", f"{tips_data['size'].mean():.1f}")
    
    # –ü—Ä–æ—Å—Ç—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
    tab1, tab2 = st.tabs(["–ì—Ä–∞—Ñ–∏–∫–∏", "–î–∞–Ω–Ω—ã–µ"])
    
    with tab1:
        # –ì—Ä–∞—Ñ–∏–∫ 1
        fig1, ax1 = plt.subplots(figsize=(8, 4))
        ax1.scatter(tips_data['total_bill'], tips_data['tip'], alpha=0.6)
        ax1.set_xlabel("–°—É–º–º–∞ —Å—á–µ—Ç–∞ ($)")
        ax1.set_ylabel("–ß–∞–µ–≤—ã–µ ($)")
        ax1.set_title("–°–≤—è–∑—å —Å—É–º–º—ã —Å—á–µ—Ç–∞ –∏ —á–∞–µ–≤—ã—Ö")
        ax1.grid(True, alpha=0.3)
        st.pyplot(fig1)
        plt.close(fig1)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2
        fig2, ax2 = plt.subplots(figsize=(8, 4))
        ax2.hist(tips_data['total_bill'], bins=15, alpha=0.7, edgecolor='black')
        ax2.set_xlabel("–°—É–º–º–∞ —Å—á–µ—Ç–∞ ($)")
        ax2.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        ax2.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—É–º–º—ã —Å—á–µ—Ç–∞")
        st.pyplot(fig2)
        plt.close(fig2)
    
    with tab2:
        st.write("–ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π:")
        st.dataframe(tips_data.head(10))
        
        st.write("–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
        st.dataframe(tips_data.describe().round(2))
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Tips - –ü–†–ê–í–ò–õ–¨–ù–û–ï –†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï
        csv_data = tips_data.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ Tips",
            data=csv_data,
            file_name="tips_data.csv",
            mime="text/csv"
        )

st.markdown('---')
st.write("¬© –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
